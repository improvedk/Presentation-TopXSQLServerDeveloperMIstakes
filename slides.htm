
<!doctype html>
<html lang="en">

	<head>
		<title>Top X SQL Server Developer Mistakes</title>
		<meta charset="utf-8">
		<meta name="author" content="Mark S. Rasmussen">
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/default.css" id="theme">

		<!-- For syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- If the query includes 'print-pdf', use the PDF print sheet -->
		<script>
			document.write('<link rel="stylesheet" href="css/print/' + (window.location.search.match(/print-pdf/gi) ? 'pdf' : 'paper') + '.css" type="text/css" media="print">');
		</script>

		<style>
			* { tab-size: 4; }
		</style>
	</head>

	<body>

		<div class="reveal">

			<div class="slides">

				<!-- Intro -->
				<section>
					<h1>TOP X SQL Server Developer Mistakes</h1>
					<h3>Mark S. Rasmussen</h3>
					<h3>iPaper A/S</h3>
				</section>

				<section>
					<h2>Who Am I</h2>
					<ul>
						<li>Tech Lead @ iPaper A/S</li>
						<li>Comp.Sci @ Aarhus University</li>
						<li>Presenter</li>
						<li>SQL Server MVP</li>
					</ul>
				</section>


				<!-- The manual UPSERT -->
				<section>
					<section>
						<h1>The manual UPSERT</h1>
					</section>

					<section>
						<h2>The setup</h2>
						<pre><code>
CREATE TABLE Pages (
	Name varchar(128),
	Hits int
)
						</code></pre>
					</section>

					<section>
						<h2>Method 1: SELECT + INSERT/UPDATE</h2>

						Step 1 - Select
						<pre><code>
SELECT * FROM Pages WHERE Name = 'Test'
						</code></pre>
						<br />

						<div class="fragment">
							Step 2 - Insert
							<pre><code>
INSERT INTO Pages (Name, Hits) VALUES ('Test', 1)
							</code></pre>
							<br />
						</div>

						<div class="fragment">
							Step 2 - Update
							<pre><code>
UPDATE Pages SET Hits = Hits + 1 WHERE Name = 'Test'
							</code></pre>
						</div>
					</section>

					<section>
						<h2>Method 1 - Pros/Cons</h2>
						<ul>
							<li>&divide; Chatty</li>
							<li class="fragment">&divide; Two lookups</li>
							<li class="fragment">&divide; Needs pessimistic isolation</li>
							<li class="fragment">&divide; Needs UPDLOCK hint</li>
						</ul>
						<br />
						<br />
						<pre class="fragment"><code>
using (var ts = new TransactionScope()) {
	SELECT * FROM Pages WITH (UPDLOCK) WHERE Name = 'Test'
	...
						</code></pre>
					</section>

					<section>
						<h2>Method 2: Optimistic update</h2>
						Step 1 - Update
						<pre><code>
var rowsModified = new SqlCommand(
	"UPDATE Pages SET Hits = Hits + 1 WHERE Name = 'Test'"
).ExecuteNonQuery();
						</code></pre>
						<br />

						<div class="fragment">
							Step 2 - if (rowsModified == 0)
							<pre><code>
INSERT INTO Pages (Name, Hits) VALUES ('Test', 1)
							</code></pre>
							<br />
						</div>
					</section>

					<section>
						<h2>Method 2 - Pros/Cons</h2>
						<ul>
							<li>+ Not chatty (optimistically)</li>
							<li class="fragment">+ One lookup (optimistically)</li>
							<li class="fragment">&divide; Needs pessimistic isolation</li>
						</ul>
						<br />
						<br />
						<pre class="fragment"><code>
using (var ts = new TransactionScope()) {
	SELECT * FROM Pages WITH (UPDLOCK) WHERE Name = 'Test'
	...
						</code></pre>
					</section>

					<section>
						<h2>Method 3: Merge</h2>
						<pre><code>
MERGE
	Pages AS Target
USING
	(SELECT 'Test', 1) AS Source (Name, Hits)
ON
	Target.Name = Source.Name
WHEN MATCHED THEN
	UPDATE SET Target.Hits = Target.Hits + Source.Hits
WHEN NOT MATCHED BY TARGET THEN
	INSERT (Name, Hits) VALUES (Source.Name, Source.Hits)
						</code></pre>
						<br />
					</section>

					<section>
						<h2>Method 3 - Pros/Cons</h2>
						<ul>
							<li>+ Not chatty (always)</li>
							<li class="fragment">+ One lookup (always)</li>
							<li class="fragment">+ Atomic operation</li>
						</ul>
					</section>
				</section>


				<!-- The chatty menu -->
				<section>
					<section>
						<h1>The chatty menu</h1>
					</section>

					<section>
						<h2>The setup 1/3</h2>
						<pre><code>
CREATE TABLE Categories (
	ID int,
	ParentID int,
	Name varchar(128)
)
						</code></pre>
					</section>

					<section>
						<h2>The setup 2/3</h2>
						<pre><code>
INSERT INTO
	Categories (ID, ParentID, Name)
VALUES
	(1, null, 'Root'),
	(2, 1, 'Languages'),
	(3, 2, 'C#'),
	(4, 2, 'T-SQL'),
	(5, 1, 'Operating systems'),
	(6, 5, 'OS X'),
	(7, 5, 'Windows')
						</code></pre>
					</section>

					<section>
						<h2>The setup 3/3</h2>
						<pre><code>
	Root
		Languages
			C#
			T-SQL
		Operating systems
			OS X
			Windows
					    </code></pre>
					</section>

					<section>
						<h2>Method 1: Nested selects</h2>
						<pre><code>
var cmd = new SqlCommand(@"
	SELECT * FROM Categories WHERE ParentID = @ParentID");

cmd.Parameters.Add("@ParentID", SqlDbType.Int);
						</code></pre>
						<pre class="fragment"><code>
void PrintMenu(int? parentID, string indent)
{
	cmd.Parameters["@ParentID"].Value = parentID;

	foreach (var row in DB.GetRows(cmd)) {
		Console.WriteLine(indent + row["Name"]);

		PrintMenu(row.Get&lt;int?&gt;(["ID"]), indent + "    ");
	}
}
						</code></pre>
						<pre class="fragment"><code>
PrintMenu(null, "");
					    </code></pre>
						<br />
					</section>

					<section>
						<h2>Method 1 - Pros/Cons</h2>
						<ul>
							<li>+ Simple to understand</li>
							<li class="fragment">&divide; Chatty</li>
							<li class="fragment">&divide; Dangerous if connections are kept open</li>
						</ul>
					</section>

					<section>
						<h2>Method 2: Clientside</h2>
						<pre><code>
var cats = DB.GetEntities&lt;Category&gt;("SELECT * FROM Categories");

PrintMenu(categories, null, "");
						</code></pre>
						<pre class="fragment"><code>
void PrintMenu(List&lt;Category&gt; cats, int? parentID, string indent)
{
	cats.Where(x => x.ParentID == parentID).ForEach(x => {
		Console.WriteLine(indent + cat.Name);

		PrintMenu(cats, cat.ID, indent + "    ");
	});
}
						</code></pre>
					</section>

					<section>
						<h2>Method 2 - Pros/Cons</h2>
						<ul>
							<li>+ Simple to understand</li>
							<li class="fragment">+ One call to database</li>
							<li class="fragment">&divide; Dangerous if connections are kept open</li>
						</ul>
					</section>

					<section>
						<h2>Method 3 - Common Table Expressions</h2>
						<pre><code>
	Root
		<b>Languages
			C#
			T-SQL</b>
		Operating systems
			OS X
			Windows
					    </code></pre>
					</section>

					<section>
						<h2>Method 3 - Common Table Expressions</h2>
						<pre><code>
WITH CTE AS
(
	SELECT &lt;Anchor&gt;

	UNION ALL

	SELECT &lt;Children&gt;
)
SELECT * FROM CTE
					    </code></pre>
					</section>

					<section>
						<h2>Method 3 - Common Table Expressions</h2>
						<pre><code>
WITH CTE AS
(
	SELECT
		ID,
		ParentID,
		Name,
		4 AS Indent
	FROM
		Categories
	WHERE
		ParentID IS NULL

	UNION ALL

	SELECT &lt;Children&gt;
)
SELECT * FROM CTE
					    </code></pre>
					</section>

					<section>
						<h2>Method 3 - Common Table Expressions</h2>
						<pre><code>
WITH CTE AS
(
	SELECT
		ID,
		ParentID,
		Name,
		4 AS Indent
	FROM
		Categories
	WHERE
		ParentID IS NULL

	UNION ALL

	SELECT
		C.ID,
		C.ParentID,
		CAST(
			REPLICATE(' ', CTE.Indent) + C.Name AS varchar(128)
		) AS Name,
		Indent + 4 AS Indent
	FROM
		Categories C
	INNER JOIN
		CTE ON C.ParentID = CTE.ID
)
SELECT Name FROM CTE
					    </code></pre>
					</section>

					<section>
						<h2>Method 3 - Pros/Cons</h2>
						<ul>
							<li>+ One call to database</li>
							<li class="fragment">+ Set-based logic run in database</li>
							<li class="fragment">+ Powerful filtering</li>
							<li class="fragment">&divide; MSSQL (2005+) specific</li>
						</ul>
						<br />
						<br />
						<p class="fragment"><a href="demos/The chatty menu.sql">Demo</a></p>
					</section>
				</section>


				<!-- The bloated plan cache -->
				<section>
					<section>
						<h1>The bloated plan cache</h1>
					</section>

					<section>
						<h2>Deviously simple queries</h2>
						<pre><code>
void DeleteUser(int userID)
{
	string sql = "DELETE FROM Users WHERE UserID = " + userID;

	DB.Execute(sql);
}
						</code></pre>
					</section>

					<section>
						<h2>Exploring the cache</h2>
						<pre><code>
SELECT TOP 100
	CP.refcounts,
	CP.usecounts,
	CP.size_in_bytes,
	CP.cacheobjtype,
	CP.objtype,
	sql_text.text,
	query_plan.query_plan,
	CP.plan_handle
FROM
	sys.dm_exec_cached_plans CP
OUTER APPLY
	sys.dm_exec_sql_text(plan_handle) AS sql_text
OUTER APPLY
	sys.dm_exec_query_plan(plan_handle) AS query_plan
ORDER BY
	CP.usecounts DESC/ASC -- Most/least used plans
						</code></pre>
					</section>

					<section>
						<h2>Most used plans</h2>
						<img src="images/most_used_plans.png" />
					</section>

					<section>
						<h2>Least used plans</h2>
						<img src="images/least_used_plans.png" />
					</section>

					<section>
						<h2>What's the impact?</h2>
						<pre><code>
SELECT
	COUNT(*) AS number_of_cached_plans,
	SUM(CONVERT(BIGINT, size_in_bytes)) / 1048576 AS size_in_mb
FROM
	sys.dm_exec_cached_plans
						</code></pre>
						<img src="images/plan_cache_size.png" class="fragment" />
					</section>

					<section>
						<h2>Do or do not, there is no try</h2>
						<pre><code>
UPDATE
	tblFEStatsDayHits
SET
	LargeHitCount = LargeHitCount + @LargeHitCount,
	LargeViewCount = LargeViewCount + @LargeViewCount,
	LargeTraffic = LargeTraffic + @LargeTraffic,
	SmallViewCount = SmallViewCount + @SmallViewCount,
	SmallHitCount = SmallHitCount + @SmallHitCount,
	SmallTraffic = SmallTraffic + @SmallTraffic,
	ThumbHitCount = ThumbHitCount + @ThumbHitCount,
	ThumbTraffic = ThumbTraffic + @ThumbTraffic,
	TotalTraffic = TotalTraffic + @TotalTraffic
WHERE
	DayHitID = 7897701
						</code></pre>
					</section>
				</section>


				<!-- The Serializable TransactionScope -->
				<section>
					<section>
						<h1>The Serializable TransactionScope</h1>
					</section>
				</section>


				<!-- Outro -->
				<section>
					<h2>Ask me anything</h2>
					<a href="http://twitter.com/improvedk">twitter.com/improvedk</a><br />
					<a href="http://improve.dk">improve.dk</a><br />
					<a href="mailto:mark@improve.dk">mark@improve.dk</a>
				</section>

			</div>

		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.min.js"></script>

		<script>
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,
				overview: true,
				autoSlide: 0,
				rollingLinks: false,
				transition: 'default',

				dependencies: [
					{ src: 'lib/js/classList.js', condition: function () { return !document.body.classList; } },
					{ src: 'plugin/markdown/showdown.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },
					{ src: 'plugin/markdown/markdown.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function () { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function () { return !!document.body.classList; } },
				]
			});

		</script>

	</body>
</html>