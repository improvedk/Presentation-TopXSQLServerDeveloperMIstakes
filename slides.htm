<!doctype html>
<html lang="en">

	<head>
		<title>Top X SQL Server Developer Mistakes</title>
		<meta charset="utf-8">
		<meta name="author" content="Mark S. Rasmussen">
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/default.css" id="theme">

		<!-- For syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- If the query includes 'print-pdf', use the PDF print sheet -->
		<script>
			document.write('<link rel="stylesheet" href="css/print/' + (window.location.search.match(/print-pdf/gi) ? 'pdf' : 'paper') + '.css" type="text/css" media="print">');
		</script>

		<style>
			* { tab-size: 4; }
			table.batchinputdata thead th { text-align: center; padding: 0 30px 0 30px; }
			table.batchinputdata tbody td { text-align: center; }
		</style>
	</head>

	<body>

		<div class="reveal">

			<div class="slides">

				<!-- Intro -->
				<section>
					<h1>TOP X SQL Server Developer Mistakes</h1>
					<h3>Mark S. Rasmussen</h3>
					<h3>iPaper A/S</h3>
				</section>

				<section>
					<h2>Who Am I</h2>
					<ul>
						<li>Tech Lead @ iPaper A/S</li>
						<li>Comp.Sci @ Aarhus University</li>
						<li>Presenter</li>
						<li>SQL Server MVP</li>
					</ul>
				</section>


				<!-- The Oblivious TransactionScope -->
				<section>
					<section>
						<h1>The Oblivious TransactionScope</h1>
					</section>

					<section>
						<h2>.NET 1.1</h2>
						<pre><code>
SqlConnection myConnection = new SqlConnection("...");
	
using (myConnection)
{
	myConnection.Open();
	
	try
	{
		SqlTransaction myTrans = myConnection.BeginTransaction();
		
		SqlCommand myCommand = myConnection.CreateCommand();
		myCommand.Transaction = myTrans;
		myCommand.CommandText = "INSERT INTO MyTable ...";
		myCommand.ExecuteNonQuery();
		
		myTrans.Commit();
	}
	catch(Exception e)
	{
		myTrans.Rollback();
	}
}
						</code></pre>
					</section>

					<section>
						<h2>.NET 2.0</h2>
						<pre><code>
using (var myConnection = new SqlConnection("..."))
using (var ts = new TransactionScope())
{
	myConnection.Open();
	
	SqlCommand myCommand = myConnection.CreateCommand();
	myCommand.CommandText = "INSERT INTO MyTable ...";
	myCommand.ExecuteNonQuery();
	
	ts.Complete();
}
						</code></pre>
					</section>

					<section>
						<h2>Isolation Levels 101</h2>
						<img src="images/isolation_levels.png" />
					</section>

					<section>
						<h2>Specifying the Isolation Level</h2>
						<pre><code>
var options = new TransactionOptions {
	IsolationLevel = IsolationLevel.ReadCommitted
}

var scopeOption = TransactionScopeOption.Required;

using (var ts = new TransactionScope(scopeOption, options))
{
	...
}
						</code></pre>
					</section>

					<section>
						<h2>Death to locks and NOLOCK!</h2>
						<pre><code>
SELECT COUNT(*) FROM Visitors WHERE CatalogID = @CatalogID
						</code></pre>
						<pre class="fragment"><code>
SELECT COUNT(*) FROM Visitors WITH (NOLOCK) WHERE CatalogID = @CatalogID
						</code></pre>
						<pre class="fragment"><code>
var options = new TransactionOptions {
	IsolationLevel = IsolationLevel.ReadUncommitted
}

var scopeOption = TransactionScopeOption.Required;

using (var ts = new TransactionScope(scopeOption, options))
{
	...
}
						</code></pre>
					</section>

					<section>
						<h2>Beware of Escalation</h2>
						<img src="images/dtc.png" />
					</section>

					<section>
						<h2>Escalation Causes</h2>
						<img src="images/dtc_escalation.png" />
					</section>
				</section>

				<!-- The Manual UPSERT -->
				<section>
					<section>
						<h1>The manual UPSERT</h1>
					</section>

					<section>
						<h2>The setup</h2>
						<pre><code>
CREATE TABLE Pages (
	Name varchar(128),
	Hits int
)
						</code></pre>
					</section>

					<section>
						<h2>Method 1: SELECT + INSERT/UPDATE</h2>

						Step 1 - Select
						<pre><code>
SELECT * FROM Pages WHERE Name = 'Test'
						</code></pre>
						<br />

						<div class="fragment">
							Step 2 - Insert
							<pre><code>
INSERT INTO Pages (Name, Hits) VALUES ('Test', 1)
							</code></pre>
							<br />
						</div>

						<div class="fragment">
							Step 2 - Update
							<pre><code>
UPDATE Pages SET Hits = Hits + 1 WHERE Name = 'Test'
							</code></pre>
						</div>
					</section>

					<section>
						<h2>Method 1 - Pros/Cons</h2>
						<ul>
							<li>&divide; Chatty</li>
							<li class="fragment">&divide; Two lookups</li>
							<li class="fragment">&divide; Needs pessimistic isolation</li>
							<li class="fragment">&divide; Needs UPDLOCK hint</li>
						</ul>
						<br />
						<br />
						<pre class="fragment"><code>
using (var ts = new TransactionScope()) {
	SELECT * FROM Pages WITH (UPDLOCK) WHERE Name = 'Test'
	...
						</code></pre>
					</section>

					<section>
						<h2>Method 2: Optimistic update</h2>
						Step 1 - Update
						<pre><code>
var rowsModified = new SqlCommand(
	"UPDATE Pages SET Hits = Hits + 1 WHERE Name = 'Test'"
).ExecuteNonQuery();
						</code></pre>
						<br />

						<div class="fragment">
							Step 2 - if (rowsModified == 0)
							<pre><code>
INSERT INTO Pages (Name, Hits) VALUES ('Test', 1)
							</code></pre>
							<br />
						</div>
					</section>

					<section>
						<h2>Method 2 - Pros/Cons</h2>
						<ul>
							<li>+ Not chatty (optimistically)</li>
							<li class="fragment">+ One lookup (optimistically)</li>
							<li class="fragment">&divide; Needs pessimistic isolation</li>
						</ul>
						<br />
						<br />
						<pre class="fragment"><code>
using (var ts = new TransactionScope()) {
	SELECT * FROM Pages WITH (UPDLOCK) WHERE Name = 'Test'
	...
						</code></pre>
					</section>

					<section>
						<h2>Method 3: Merge</h2>
						<pre><code>
MERGE
	Pages AS Target
USING
	(SELECT 'Test', 1) AS Source (Name, Hits)
ON
	Target.Name = Source.Name
WHEN MATCHED THEN
	UPDATE SET Target.Hits = Target.Hits + Source.Hits
WHEN NOT MATCHED BY TARGET THEN
	INSERT (Name, Hits) VALUES (Source.Name, Source.Hits)
						</code></pre>
						<br />
					</section>

					<section>
						<h2>Method 3 - Pros/Cons</h2>
						<ul>
							<li>+ Not chatty (always)</li>
							<li class="fragment">+ One lookup (always)</li>
							<li class="fragment">+ Atomic operation</li>
						</ul>
					</section>
				</section>

				<!-- The Chatty Menu -->
				<section>
					<section>
						<h1>The chatty menu</h1>
					</section>

					<section>
						<h2>The setup 1/3</h2>
						<pre><code>
CREATE TABLE Categories (
	ID int,
	ParentID int,
	Name varchar(128)
)
						</code></pre>
					</section>

					<section>
						<h2>The setup 2/3</h2>
						<pre><code>
INSERT INTO
	Categories (ID, ParentID, Name)
VALUES
	(1, null, 'Root'),
	(2, 1, 'Languages'),
	(3, 2, 'C#'),
	(4, 2, 'T-SQL'),
	(5, 1, 'Operating systems'),
	(6, 5, 'OS X'),
	(7, 5, 'Windows')
						</code></pre>
					</section>

					<section>
						<h2>The setup 3/3</h2>
						<pre><code>
	Root
		Languages
			C#
			T-SQL
		Operating systems
			OS X
			Windows
					    </code></pre>
					</section>

					<section>
						<h2>Method 1: Nested selects</h2>
						<pre><code>
var cmd = new SqlCommand(@"
	SELECT * FROM Categories WHERE ParentID = @ParentID");

cmd.Parameters.Add("@ParentID", SqlDbType.Int);
						</code></pre>
						<pre class="fragment"><code>
void PrintMenu(int? parentID, string indent)
{
	cmd.Parameters["@ParentID"].Value = parentID;

	foreach (var row in DB.GetRows(cmd)) {
		Console.WriteLine(indent + row["Name"]);

		PrintMenu(row.Get&lt;int?&gt;(["ID"]), indent + "    ");
	}
}
						</code></pre>
						<pre class="fragment"><code>
PrintMenu(null, "");
					    </code></pre>
						<br />
					</section>

					<section>
						<h2>Method 1 - Pros/Cons</h2>
						<ul>
							<li>+ Simple to understand</li>
							<li class="fragment">&divide; Chatty</li>
							<li class="fragment">&divide; Dangerous if connections are kept open</li>
						</ul>
					</section>

					<section>
						<h2>Method 2: Clientside</h2>
						<pre><code>
var cats = DB.GetEntities&lt;Category&gt;("SELECT * FROM Categories");

PrintMenu(categories, null, "");
						</code></pre>
						<pre class="fragment"><code>
void PrintMenu(List&lt;Category&gt; cats, int? parentID, string indent)
{
	cats.Where(x => x.ParentID == parentID).ForEach(x => {
		Console.WriteLine(indent + cat.Name);

		PrintMenu(cats, cat.ID, indent + "    ");
	});
}
						</code></pre>
					</section>

					<section>
						<h2>Method 2 - Pros/Cons</h2>
						<ul>
							<li>+ Simple to understand</li>
							<li class="fragment">+ One call to database</li>
							<li class="fragment">&divide; Dangerous if connections are kept open</li>
						</ul>
					</section>

					<section>
						<h2>Method 3 - Common Table Expressions</h2>
						<pre><code>
	Root
		<b>Languages
			C#
			T-SQL</b>
		Operating systems
			OS X
			Windows
					    </code></pre>
					</section>

					<section>
						<h2>Method 3 - Common Table Expressions</h2>
						<pre><code>
WITH CTE AS
(
	SELECT &lt;Anchor&gt;

	UNION ALL

	SELECT &lt;Children&gt;
)
SELECT * FROM CTE
					    </code></pre>
					</section>

					<section>
						<h2>Method 3 - Common Table Expressions</h2>
						<pre><code>
WITH CTE AS
(
	SELECT
		ID,
		ParentID,
		Name,
		4 AS Indent
	FROM
		Categories
	WHERE
		ParentID IS NULL

	UNION ALL

	SELECT &lt;Children&gt;
)
SELECT * FROM CTE
					    </code></pre>
					</section>

					<section>
						<h2>Method 3 - Common Table Expressions</h2>
						<pre><code>
WITH CTE AS
(
	SELECT
		ID,
		ParentID,
		Name,
		4 AS Indent
	FROM
		Categories
	WHERE
		ParentID IS NULL

	UNION ALL

	SELECT
		C.ID,
		C.ParentID,
		CAST(
			REPLICATE(' ', CTE.Indent) + C.Name AS varchar(128)
		) AS Name,
		Indent + 4 AS Indent
	FROM
		Categories C
	INNER JOIN
		CTE ON C.ParentID = CTE.ID
)
SELECT Name FROM CTE
					    </code></pre>
					</section>

					<section>
						<h2>Method 3 - Pros/Cons</h2>
						<ul>
							<li>+ One call to database</li>
							<li class="fragment">+ Set-based logic run in database</li>
							<li class="fragment">+ Powerful filtering</li>
							<li class="fragment">&divide; MSSQL (2005+) specific</li>
						</ul>
						<br />
						<br />
						<p class="fragment"><a href="demos/The chatty menu.sql">Demo</a></p>
					</section>
				</section>

				<!-- The Bloated Plan Cache -->
				<section>
					<section>
						<h1>The bloated plan cache</h1>
					</section>

					<section>
						<h2>Deviously simple queries</h2>
						<pre><code>
void DeleteUser(int userID)
{
	string sql = "DELETE FROM Users WHERE UserID = " + userID;

	DB.Execute(sql);
}
						</code></pre>
					</section>

					<section>
						<h2>Exploring the cache</h2>
						<pre><code>
SELECT TOP 100
	CP.refcounts,
	CP.usecounts,
	CP.size_in_bytes,
	CP.cacheobjtype,
	CP.objtype,
	sql_text.text,
	query_plan.query_plan,
	CP.plan_handle
FROM
	sys.dm_exec_cached_plans CP
OUTER APPLY
	sys.dm_exec_sql_text(plan_handle) AS sql_text
OUTER APPLY
	sys.dm_exec_query_plan(plan_handle) AS query_plan
ORDER BY
	CP.usecounts DESC/ASC -- Most/least used plans
						</code></pre>
					</section>

					<section>
						<h2>Most used plans</h2>
						<img src="images/most_used_plans.png" />
					</section>

					<section>
						<h2>Least used plans</h2>
						<img src="images/least_used_plans.png" />
					</section>

					<section>
						<h2>What's the impact?</h2>
						<pre><code>
SELECT
	COUNT(*) AS number_of_cached_plans,
	SUM(CONVERT(BIGINT, size_in_bytes)) / 1048576 AS size_in_mb
FROM
	sys.dm_exec_cached_plans
						</code></pre>
						<img src="images/plan_cache_size.png" class="fragment" />
					</section>

					<section>
						<h2>Do or do not, there is no try</h2>
						<pre><code>
UPDATE
	tblFEStatsDayHits
SET
	LargeHitCount = LargeHitCount + @LargeHitCount,
	LargeViewCount = LargeViewCount + @LargeViewCount,
	LargeTraffic = LargeTraffic + @LargeTraffic,
	SmallViewCount = SmallViewCount + @SmallViewCount,
	SmallHitCount = SmallHitCount + @SmallHitCount,
	SmallTraffic = SmallTraffic + @SmallTraffic,
	ThumbHitCount = ThumbHitCount + @ThumbHitCount,
	ThumbTraffic = ThumbTraffic + @ThumbTraffic,
	TotalTraffic = TotalTraffic + @TotalTraffic
WHERE
	DayHitID = 7897701
						</code></pre>
					</section>
				</section>

				<!-- The Lack of Batching -->
				<section>
					<section>
						<h1>The Lack of Batching</h1>
					</section>

					<section>
						<h2>Comes in many forms</h2>
						<ul>
							<li>Batching statements</li>
							<li class="fragment">Batching batches</li>
							<li class="fragment">Batching input data</li>
							<li class="fragment">Batching disk IO</li>
						</ul>
					</section>

					<section>
						<h2>Batching statements</h2>
						<pre><code>
var cmd = new SqlCommand();
cmd.Parameters.Add("@PageID", SqlDbType.Int).Value = 25;

cmd.CommandText = 
	"INSERT INTO Visitors VALUES (@PageID, getDate())";
cmd.ExecuteNonQuery();

cmd.CommandText = 
	"UPDATE Pages SET Used = getDate() WHERE PageID = @PageID";
cmd.ExecuteNonQuery();
						</code></pre>
						<pre class="fragment"><code>
var cmd = new SqlCommand(@"
	INSERT INTO Visitors VALUES (@PageID, getDate());
	UPDATE Pages SET Used = getDate() WHERE PageID = @PageID");
	
cmd.Parameters.Add("@PageID", SqlDbType.Int).Value = 25;
cmd.ExecuteNonQuery();
						</code></pre>
					</section>

					<section>
						<h2>Batching Batches 1/3</h2>
						<pre><code>
for (int i=1; i<=20; i++)
{
	byte[] imageBytes = createImage(...);
	File.WriteAllBytes(i + ".jpg", imageBytes);
	
	var cmd = new SqlCommand(
		"INSERT INTO Images VALUES (@Number, @Size)");
	cmd.Parameters.Add("@Number").Value = i;
	cmd.Parameters.Add("@Size").Value = imageBytes.Length;
	cmd.ExecuteNonQuery();
}
						</code></pre>
					</section>

					<section>
						<h2>Batching Batches 2/3</h2>
						<pre><code>
var sb = new StringBuilder();
var cmd = new SqlCommand();

for (int i=1; i<=20; i++)
{
	byte[] imageBytes = createImage(...);
	File.WriteAllBytes(i + ".jpg", imageBytes);
	
	sb.Append("INSERT Images VALUES (@Number"+i+", @Size"+i+")");
	cmd.Parameters.Add("@Number" + i).Value = i;
	cmd.Parameters.Add("@Size" + i).Value = imageBytes.Length;
}

cmd.CommandText = sb.ToString();
cmd.ExecuteNonQuery();
						</code></pre>
					</section>

					<section>
						<h2>Batching Batches 3/3</h2>
						<pre><code>
using (var cmdSet = new SqlCommandSet())
{
	for (int i=1; i<=20; i++)
	{
		byte[] imageBytes = createImage(...);
		string path = basePath + i + ".jpg";
		File.WriteAllBytes(path, imageBytes);
		
		var cmd = new SqlCommand(
			"INSERT INTO Images VALUES (@Number, @Size)");
		cmd.Parameters.Add("@Number").Value = i;
		cmd.Parameters.Add("@Size").Value = imageBytes.Length;
		cmdSet.Append(cmd);
	}
	
	cmdSet.ExecuteNonQuery();
}
						</code></pre>
					</section>

					<section>
						<h2>Here Be Dragons</h2>
						<pre><code>
namespace System.Data.SqlClient
{
	internal sealed class SqlCommandSet
	{
		...
	}
}
						</code></pre>
						<a href="https://github.com/ayende/rhino-etl/blob/master/Rhino.Etl.Core/Infrastructure/SqlCommandSet.cs" class="fragment">github.com/ayende/rhino-etl/.../SqlCommandSet.cs</a>
						<br />
						<br />
						<span class="fragment">Limit batch size to 100-1000!</span>
						<br />
						<span class="fragment">Wrap in TransactionScope!</span>
					</section>

					<section>
						<h2>Batching Input Data 1/3</h2>
						<table style="margin: auto" class="batchinputdata">
							<thead>
								<tr>
									<th>@Number</th>
									<th>@Size</th>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>1</td>
									<td>9745</td>
								</tr>
								<tr>
									<td>2</td>
									<td>7422</td>
								</tr>
								<tr>
									<td>...</td>
									<td>...</td>
								</tr>
								<tr>
									<td>20</td>
									<td>3489</td>
								</tr>
						</table>
					</section>

					<section>
						<h2>Batching Input Data 2/3</h2>
						<pre><code>
	CREATE TYPE
		dbo.ImageNumberAndSize
	AS TABLE (
		Number smallint,
		Size int
	)
						</code></pre>
						<pre class="fragment"><code>
	var images = new DataTable();
	images.Columns.Add("Number", typeof(short));
	images.Columns.Add("Size", typeof(int));

	for (int i=1; i<=20; i++)
	{
		byte[] imageBytes = createImage(...);
		File.WriteAllBytes(i + ".jpg", imageBytes);
	
		dt.Rows.Add(i, (int)imageBytes.Length);
	}
						</pre></code>
					</section>

					<section>
						<h2>Batching Input Data 3/3</h2>
						<pre><code>
var cmd = new SqlCommand(@"
	INSERT INTO
		Images (Number, Size)
	SELECT
		Number, Size
	FROM
		@Input");
cmd.Parameters.Add("@Input", SqlDbType.Structued).Value = images;
cmd.Parameters["@Input"].TypeName = "dbo.ImageNumberAndSize";
cmd.ExecuteNonQuery();
						</pre></code>
					</section>

					<section>
						<h2>Batching Disk IO:<br />Transaction Internals</h2>
						<ul>
							<ol>
								<li>Page updated in buffer</li>
								<li class="fragment">Rollback data written to log cache</li>
								<li class="fragment">Commit: Log cache written to disk</li>
							</ol>
						</ul>
						<br />
						<br />
						<p class="fragment">
							Demo: Many Commits
						</p>
					</section>
				</section>


				<!-- Outro -->
				<section>
					<h2>Ask me anything</h2>
					<a href="http://twitter.com/improvedk">twitter.com/improvedk</a><br />
					<a href="http://improve.dk">improve.dk</a><br />
					<a href="mailto:mark@improve.dk">mark@improve.dk</a>
				</section>

			</div>

		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.min.js"></script>

		<script>
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,
				overview: true,
				autoSlide: 0,
				rollingLinks: false,
				transition: 'default',

				dependencies: [
					{ src: 'lib/js/classList.js', condition: function () { return !document.body.classList; } },
					{ src: 'plugin/markdown/showdown.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },
					{ src: 'plugin/markdown/markdown.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function () { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function () { return !!document.body.classList; } },
				]
			});

		</script>

	</body>
</html>